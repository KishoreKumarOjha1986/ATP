1. Before using Secrets, we have to keep in mind that Secret should be always created before dependent Pods, so dependent Pods can
reference it properly. In addition, Secrets have a 1MB size limitation.
2. For configuration data, consider using ConfigMaps. For large amounts of non-sensitive data, consider using volumes instead.

Command to encode secret :
root@ip-10-0-137-241:~# echo '9S!g0U61699r' | base64
Output : OVMhZzBVNjE2OTlyCg==

To decode : 
echo "OVMhZzBVNjE2OTlyCg==" | base64 --decode
9S!g0U61699r

# Creating a secret using YAML configuration file:
apiVersion: v1
kind: Secret
metadata:
  name: access-token
type: Opaque
data:
  2-7-1_access-token: OVMhZzBVNjE2OTlyCg==
  

Using Secrets in Pods
To use Secrets inside Pods, we can choose to expose them in environment variables or mount the Secrets as volumes.

By environment variables
In terms of accessing Secrets inside a Pod, add env section inside the container spec:

apiVersion: v1
kind: Pod
metadata:
  name: secret-example-env
spec:
  containers:
  - name: ubuntu
    image: ubuntu
    command: ["/bin/sh", "-c", "while : ;do echo $ACCESS_TOKEN; sleep 10; done"]
    env:
      - name: ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            name: access-token
            key: 2-7-1_access-token

// check stdout logs
root@ip-10-0-137-241:~# kubectl logs -f secret-example-env
9S!g0U61699r
9S!g0U61699r
9S!g0U61699r
9S!g0U61699r

root@ip-10-0-137-241:~# kubectl describe pods secret-example-env
Name:         secret-example-env
Namespace:    default
Priority:     0
Node:         ip-10-0-140-177/10.0.140.177
Start Time:   Sat, 17 Aug 2019 07:11:10 +0000
Labels:       <none>
Annotations:  cni.projectcalico.org/podIP: 192.168.200.193/32
Status:       Running
IP:           192.168.200.193
Containers:
  ubuntu:
    Container ID:  docker://6ac04455d83e80fc1f77263f865de5285114583c9c445686635d7db1f5348572
    Image:         ubuntu
    Image ID:      docker-pullable://ubuntu@sha256:d1d454df0f579c6be4d8161d227462d69e163a8ff9d20a847533989cf0c94d90
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
      -c
      while : ;do echo $ACCESS_TOKEN; sleep 10; done
    State:          Running
      Started:      Sat, 17 Aug 2019 07:11:14 +0000
    Ready:          True
    Restart Count:  0
    Environment:
      ACCESS_TOKEN:  <set to the key '2-7-1_access-token' in secret 'access-token'>  Optional: false
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-kqp5q (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  default-token-kqp5q:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-kqp5q
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From                      Message
  ----    ------     ----  ----                      -------
  Normal  Scheduled  4m8s  default-scheduler         Successfully assigned default/secret-example-env to ip-10-0-140-177
  Normal  Pulling    4m7s  kubelet, ip-10-0-140-177  Pulling image "ubuntu"
  Normal  Pulled     4m5s  kubelet, ip-10-0-140-177  Successfully pulled image "ubuntu"
  Normal  Created    4m4s  kubelet, ip-10-0-140-177  Created container ubuntu
  Normal  Started    4m4s  kubelet, ip-10-0-140-177  Started container ubuntu
  
  
By volumes
A Secret can be also mounted as volume by using the Secret type of the volume. The following is an example of how to use it:

apiVersion: v1
kind: Pod
metadata:
  name: secret-example-volume
spec:
  containers:
  - name: ubuntu
    image: ubuntu
    command: ["/bin/sh", "-c", "while : ;do cat /secret/token; sleep 10; done"]
    volumeMounts:
      - name: secret-volume
        mountPath: /secret
        readOnly: true
  volumes:
    - name: secret-volume
      secret:
        secretName: access-token
        items:
        - key: 2-7-1_access-token
          path: token
          
root@ip-10-0-137-241:~# kubectl describe pods secret-example-volume
Name:         secret-example-volume
Namespace:    default
Priority:     0
Node:         ip-10-0-140-177/10.0.140.177
Start Time:   Sat, 17 Aug 2019 07:22:06 +0000
Labels:       <none>
Annotations:  cni.projectcalico.org/podIP: 192.168.200.194/32
Status:       Running
IP:           192.168.200.194
Containers:
  ubuntu:
    Container ID:  docker://78e62a243e3c44e6ddaa4f22458a81f1155f50a3ee1b330e7c707a5ffb7cb48e
    Image:         ubuntu
    Image ID:      docker-pullable://ubuntu@sha256:d1d454df0f579c6be4d8161d227462d69e163a8ff9d20a847533989cf0c94d90
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
      -c
      while : ;do cat /secret/token; sleep 10; done
    State:          Running
      Started:      Sat, 17 Aug 2019 07:22:08 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /secret from secret-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-kqp5q (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  secret-volume:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  access-token
    Optional:    false
  default-token-kqp5q:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-kqp5q
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From                      Message
  ----    ------     ----  ----                      -------
  Normal  Scheduled  88s   default-scheduler         Successfully assigned default/secret-example-volume to ip-10-0-140-177
  Normal  Pulling    87s   kubelet, ip-10-0-140-177  Pulling image "ubuntu"
  Normal  Pulled     87s   kubelet, ip-10-0-140-177  Successfully pulled image "ubuntu"
  Normal  Created    87s   kubelet, ip-10-0-140-177  Created container ubuntu
  Normal  Started    86s   kubelet, ip-10-0-140-177  Started container ubuntu
  
  
root@ip-10-0-137-241:~# kubectl delete secret access-token
secret "access-token" deleted

kubectl describe pods secret-example-volume
Events:
  Type     Reason       Age               From                      Message
  ----     ------       ----              ----                      -------
  Normal   Scheduled    5m8s              default-scheduler         Successfully assigned default/secret-example-volume to ip-10-0-140-177
  Normal   Pulling      5m7s              kubelet, ip-10-0-140-177  Pulling image "ubuntu"
  Normal   Pulled       5m7s              kubelet, ip-10-0-140-177  Successfully pulled image "ubuntu"
  Normal   Created      5m7s              kubelet, ip-10-0-140-177  Created container ubuntu
  Normal   Started      5m6s              kubelet, ip-10-0-140-177  Started container ubuntu
  Warning  FailedMount  7s (x6 over 23s)  kubelet, ip-10-0-140-177  MountVolume.SetUp failed for volume "secret-volume" : secret "access-token" not found


# cat configmap/2-7-4_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-example
data:
  app.properties: |
    name=kubernetes-cookbook
    port=443

// create configmap
# kubectl create -f configmap/2-7-4_configmap.yaml
configmap "config-example" created



# cat configmap/2-7-4_env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: configmap-env
spec:
  containers:
    - name: configmap
      image: ubuntu
      command: ["/bin/sh", "-c", "while : ;do echo $APP_NAME; sleep 10; done"]
      env:
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: config-example
              key: app.properties

// create the pod
#kubectl create -f configmap/2-7-4_env.yaml
pod "configmap-env" created

// using configmap in a pod
# cat configmap/2-7-4_volumes.yaml
apiVersion: v1
kind: Pod
metadata:
  name: configmap-volume
spec:
  containers:
    - name: configmap
      image: ubuntu
      command: ["/bin/sh", "-c", "while : ;do cat /src/app/config/app.properties; sleep 10; done"]
      volumeMounts:
      - name: config-volume
        mountPath: /src/app/config
  volumes:
    - name: config-volume
      configMap:
        name: config-example
        
        
Mounting Secrets and ConfigMap in the same volume
Projected volume is a way to group multiple volume sources into the same mount point. Currently, it supports Secrets, ConfigMap, and downwardAPI

// using projected volume
# cat 2-7-5_projected_volume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: projected-volume-example
spec:
  containers:
  - name: container-tes
    image: ubuntu
    command: ["/bin/sh", "-c", "while : ;do cat /projected-volume/configmap && cat /projected-volume/token; sleep 10; done"]
    volumeMounts:
    - name: projected-volume
      mountPath: "/projected-volume"
  volumes:
  - name: projected-volume
    projected:
      sources:
      - secret:
          name: access-token
          items:
            - key: 2-7-1_access-token
              path: token
      - configMap:
          name: config-example
          items:
            - key: app.properties
              path: configmap

// create projected volume
# kubectl create -f 2-7-5_projected_volume.yaml
pod "projected-volume-example" created








